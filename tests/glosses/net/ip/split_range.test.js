const {
    net: { ip: { IP4, IP6, splitRange } },
    util
} = ateos;

describe("net", "ip", "splitRange", () => {
    describe("IPv4", () => {
        const cases = [
            ["192.168.1.0", "192.168.1.255", [
                "192.168.1.0/24"
            ]],
            ["192.168.1.1", "192.168.1.1", [
                "192.168.1.1/32"
            ]],
            ["192.168.1.23", "192.168.1.47", [
                "192.168.1.23/32",
                "192.168.1.24/29",
                "192.168.1.32/28"
            ]],
            ["192.168.1.4", "192.168.1.32", [
                "192.168.1.4/30",
                "192.168.1.8/29",
                "192.168.1.16/28",
                "192.168.1.32/32"
            ]],
            ["192.168.0.1", "192.168.1.15", [
                "192.168.0.1/32",
                "192.168.0.2/31",
                "192.168.0.4/30",
                "192.168.0.8/29",
                "192.168.0.16/28",
                "192.168.0.32/27",
                "192.168.0.64/26",
                "192.168.0.128/25",
                "192.168.1.0/28"
            ]],
            ["192.168.1.1", "192.168.3.45", [
                "192.168.1.1/32",
                "192.168.1.2/31",
                "192.168.1.4/30",
                "192.168.1.8/29",
                "192.168.1.16/28",
                "192.168.1.32/27",
                "192.168.1.64/26",
                "192.168.1.128/25",
                "192.168.2.0/24",
                "192.168.3.0/27",
                "192.168.3.32/29",
                "192.168.3.40/30",
                "192.168.3.44/31"
            ]],
            ["8.8.8.8", "192.168.8.8", [
                "8.8.8.8/29",
                "8.8.8.16/28",
                "8.8.8.32/27",
                "8.8.8.64/26",
                "8.8.8.128/25",
                "8.8.9.0/24",
                "8.8.10.0/23",
                "8.8.12.0/22",
                "8.8.16.0/20",
                "8.8.32.0/19",
                "8.8.64.0/18",
                "8.8.128.0/17",
                "8.9.0.0/16",
                "8.10.0.0/15",
                "8.12.0.0/14",
                "8.16.0.0/12",
                "8.32.0.0/11",
                "8.64.0.0/10",
                "8.128.0.0/9",
                "9.0.0.0/8",
                "10.0.0.0/7",
                "12.0.0.0/6",
                "16.0.0.0/4",
                "32.0.0.0/3",
                "64.0.0.0/2",
                "128.0.0.0/2",
                "192.0.0.0/9",
                "192.128.0.0/11",
                "192.160.0.0/13",
                "192.168.0.0/21",
                "192.168.8.0/29",
                "192.168.8.8/32"
            ]],
            ["0.0.0.0", "255.255.255.255", [
                "0.0.0.0/0"
            ]],
            ["0.0.0.0", "0.0.0.7", [
                "0.0.0.0/29"
            ]],
            ["0.0.0.0", "0.0.0.8", [
                "0.0.0.0/29",
                "0.0.0.8/32"
            ]],
            ["0.0.0.1", "0.0.0.8", [
                "0.0.0.1/32",
                "0.0.0.2/31",
                "0.0.0.4/30",
                "0.0.0.8/32"
            ]],
            ["192.168.2.0", "192.168.2.3", [
                "192.168.2.0/30"
            ]]
        ];

        for (const [start, end, expectedSubnents] of cases) {
            specify(`${start} - ${end}`, () => {
                const actualSubnets = splitRange(start, end);
                actualSubnets.sort((a, b) => {
                    return a.startAddress().toBigNumber().compare(b.startAddress().toBigNumber());
                });
                expect(actualSubnets).to.have.lengthOf(expectedSubnents.length);
                for (const [actual, expected] of util.zip(actualSubnets, expectedSubnents.map((x) => new IP4(x)))) {
                    expect(actual).to.be.instanceOf(IP4);
                    expect(actual.address).to.be.equal(expected.address);
                }
            });
        }
    });

    describe("IPv6", () => {
        const cases = [
            ["::192.168.1.0", "::192.168.1.255", [
                "::192.168.1.0/120"
            ]],
            ["::192.168.1.1", "::192.168.1.1", [
                "::192.168.1.1/128"
            ]],
            ["::192.168.1.23", "::192.168.1.47", [
                "::192.168.1.23/128",
                "::192.168.1.24/125",
                "::192.168.1.32/124"
            ]],
            ["::192.168.1.4", "::192.168.1.32", [
                "::192.168.1.4/126",
                "::192.168.1.8/125",
                "::192.168.1.16/124",
                "::192.168.1.32/128"
            ]],
            ["::192.168.0.1", "::192.168.1.15", [
                "::192.168.0.1/128",
                "::192.168.0.2/127",
                "::192.168.0.4/126",
                "::192.168.0.8/125",
                "::192.168.0.16/124",
                "::192.168.0.32/123",
                "::192.168.0.64/122",
                "::192.168.0.128/121",
                "::192.168.1.0/124"
            ]],
            ["::192.168.1.1", "::192.168.3.45", [
                "::192.168.1.1/128",
                "::192.168.1.2/127",
                "::192.168.1.4/126",
                "::192.168.1.8/125",
                "::192.168.1.16/124",
                "::192.168.1.32/123",
                "::192.168.1.64/122",
                "::192.168.1.128/121",
                "::192.168.2.0/120",
                "::192.168.3.0/123",
                "::192.168.3.32/125",
                "::192.168.3.40/126",
                "::192.168.3.44/127"
            ]],
            ["::8.8.8.8", "::192.168.8.8", [
                "::8.8.8.8/125",
                "::8.8.8.16/124",
                "::8.8.8.32/123",
                "::8.8.8.64/122",
                "::8.8.8.128/121",
                "::8.8.9.0/120",
                "::8.8.10.0/119",
                "::8.8.12.0/118",
                "::8.8.16.0/116",
                "::8.8.32.0/115",
                "::8.8.64.0/114",
                "::8.8.128.0/113",
                "::8.9.0.0/112",
                "::8.10.0.0/111",
                "::8.12.0.0/110",
                "::8.16.0.0/108",
                "::8.32.0.0/107",
                "::8.64.0.0/106",
                "::8.128.0.0/105",
                "::9.0.0.0/104",
                "::10.0.0.0/103",
                "::12.0.0.0/102",
                "::16.0.0.0/100",
                "::32.0.0.0/99",
                "::64.0.0.0/98",
                "::128.0.0.0/98",
                "::192.0.0.0/105",
                "::192.128.0.0/107",
                "::192.160.0.0/109",
                "::192.168.0.0/117",
                "::192.168.8.0/125",
                "::192.168.8.8/128"
            ]],
            ["::0.0.0.0", "::255.255.255.255", [
                "::0.0.0.0/96"
            ]],
            ["::0.0.0.0", "::0.0.0.7", [
                "::0.0.0.0/125"
            ]],
            ["::0.0.0.0", "::0.0.0.8", [
                "::0.0.0.0/125",
                "::0.0.0.8/128"
            ]],
            ["::0.0.0.1", "::0.0.0.8", [
                "::0.0.0.1/128",
                "::0.0.0.2/127",
                "::0.0.0.4/126",
                "::0.0.0.8/128"
            ]],
            ["::", "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff", [
                "::/0"
            ]],
            ["::f1f1:beab:bebe:1010", "bf12:baaa:1333:bc54:fbcc:1032:fefe:beaf", [
                "::f1f1:beab:bebe:1010/124",
                "::f1f1:beab:bebe:1020/123",
                "::f1f1:beab:bebe:1040/122",
                "::f1f1:beab:bebe:1080/121",
                "::f1f1:beab:bebe:1100/120",
                "::f1f1:beab:bebe:1200/119",
                "::f1f1:beab:bebe:1400/118",
                "::f1f1:beab:bebe:1800/117",
                "::f1f1:beab:bebe:2000/115",
                "::f1f1:beab:bebe:4000/114",
                "::f1f1:beab:bebe:8000/113",
                "::f1f1:beab:bebf:0/112",
                "::f1f1:beab:bec0:0/106",
                "::f1f1:beab:bf00:0/104",
                "::f1f1:beab:c000:0/98",
                "::f1f1:beac:0:0/94",
                "::f1f1:beb0:0:0/92",
                "::f1f1:bec0:0:0/90",
                "::f1f1:bf00:0:0/88",
                "::f1f1:c000:0:0/82",
                "::f1f2:0:0:0/79",
                "::f1f4:0:0:0/78",
                "::f1f8:0:0:0/77",
                "::f200:0:0:0/71",
                "::f400:0:0:0/70",
                "::f800:0:0:0/69",
                "0:0:0:1::/64",
                "0:0:0:2::/63",
                "0:0:0:4::/62",
                "0:0:0:8::/61",
                "0:0:0:10::/60",
                "0:0:0:20::/59",
                "0:0:0:40::/58",
                "0:0:0:80::/57",
                "0:0:0:100::/56",
                "0:0:0:200::/55",
                "0:0:0:400::/54",
                "0:0:0:800::/53",
                "0:0:0:1000::/52",
                "0:0:0:2000::/51",
                "0:0:0:4000::/50",
                "0:0:0:8000::/49",
                "0:0:1::/48",
                "0:0:2::/47",
                "0:0:4::/46",
                "0:0:8::/45",
                "0:0:10::/44",
                "0:0:20::/43",
                "0:0:40::/42",
                "0:0:80::/41",
                "0:0:100::/40",
                "0:0:200::/39",
                "0:0:400::/38",
                "0:0:800::/37",
                "0:0:1000::/36",
                "0:0:2000::/35",
                "0:0:4000::/34",
                "0:0:8000::/33",
                "0:1::/32",
                "0:2::/31",
                "0:4::/30",
                "0:8::/29",
                "0:10::/28",
                "0:20::/27",
                "0:40::/26",
                "0:80::/25",
                "0:100::/24",
                "0:200::/23",
                "0:400::/22",
                "0:800::/21",
                "0:1000::/20",
                "0:2000::/19",
                "0:4000::/18",
                "0:8000::/17",
                "1::/16",
                "2::/15",
                "4::/14",
                "8::/13",
                "10::/12",
                "20::/11",
                "40::/10",
                "80::/9",
                "100::/8",
                "200::/7",
                "400::/6",
                "800::/5",
                "1000::/4",
                "2000::/3",
                "4000::/2",
                "8000::/3",
                "a000::/4",
                "b000::/5",
                "b800::/6",
                "bc00::/7",
                "be00::/8",
                "bf00::/12",
                "bf10::/15",
                "bf12::/17",
                "bf12:8000::/19",
                "bf12:a000::/20",
                "bf12:b000::/21",
                "bf12:b800::/23",
                "bf12:ba00::/25",
                "bf12:ba80::/27",
                "bf12:baa0::/29",
                "bf12:baa8::/31",
                "bf12:baaa::/36",
                "bf12:baaa:1000::/39",
                "bf12:baaa:1200::/40",
                "bf12:baaa:1300::/43",
                "bf12:baaa:1320::/44",
                "bf12:baaa:1330::/47",
                "bf12:baaa:1332::/48",
                "bf12:baaa:1333::/49",
                "bf12:baaa:1333:8000::/51",
                "bf12:baaa:1333:a000::/52",
                "bf12:baaa:1333:b000::/53",
                "bf12:baaa:1333:b800::/54",
                "bf12:baaa:1333:bc00::/58",
                "bf12:baaa:1333:bc40::/60",
                "bf12:baaa:1333:bc50::/62",
                "bf12:baaa:1333:bc54::/65",
                "bf12:baaa:1333:bc54:8000::/66",
                "bf12:baaa:1333:bc54:c000::/67",
                "bf12:baaa:1333:bc54:e000::/68",
                "bf12:baaa:1333:bc54:f000::/69",
                "bf12:baaa:1333:bc54:f800::/71",
                "bf12:baaa:1333:bc54:fa00::/72",
                "bf12:baaa:1333:bc54:fb00::/73",
                "bf12:baaa:1333:bc54:fb80::/74",
                "bf12:baaa:1333:bc54:fbc0::/77",
                "bf12:baaa:1333:bc54:fbc8::/78",
                "bf12:baaa:1333:bc54:fbcc::/84",
                "bf12:baaa:1333:bc54:fbcc:1000::/91",
                "bf12:baaa:1333:bc54:fbcc:1020::/92",
                "bf12:baaa:1333:bc54:fbcc:1030::/95",
                "bf12:baaa:1333:bc54:fbcc:1032::/97",
                "bf12:baaa:1333:bc54:fbcc:1032:8000::/98",
                "bf12:baaa:1333:bc54:fbcc:1032:c000::/99",
                "bf12:baaa:1333:bc54:fbcc:1032:e000::/100",
                "bf12:baaa:1333:bc54:fbcc:1032:f000::/101",
                "bf12:baaa:1333:bc54:fbcc:1032:f800::/102",
                "bf12:baaa:1333:bc54:fbcc:1032:fc00::/103",
                "bf12:baaa:1333:bc54:fbcc:1032:fe00::/105",
                "bf12:baaa:1333:bc54:fbcc:1032:fe80::/106",
                "bf12:baaa:1333:bc54:fbcc:1032:fec0::/107",
                "bf12:baaa:1333:bc54:fbcc:1032:fee0::/108",
                "bf12:baaa:1333:bc54:fbcc:1032:fef0::/109",
                "bf12:baaa:1333:bc54:fbcc:1032:fef8::/110",
                "bf12:baaa:1333:bc54:fbcc:1032:fefc::/111",
                "bf12:baaa:1333:bc54:fbcc:1032:fefe::/113",
                "bf12:baaa:1333:bc54:fbcc:1032:fefe:8000/115",
                "bf12:baaa:1333:bc54:fbcc:1032:fefe:a000/116",
                "bf12:baaa:1333:bc54:fbcc:1032:fefe:b000/117",
                "bf12:baaa:1333:bc54:fbcc:1032:fefe:b800/118",
                "bf12:baaa:1333:bc54:fbcc:1032:fefe:bc00/119",
                "bf12:baaa:1333:bc54:fbcc:1032:fefe:be00/121",
                "bf12:baaa:1333:bc54:fbcc:1032:fefe:be80/123",
                "bf12:baaa:1333:bc54:fbcc:1032:fefe:bea0/124"
            ]]
        ];

        for (const [start, end, expectedSubnents] of cases) {
            specify(`${start} - ${end}`, () => {
                const actualSubnets = splitRange(start, end);
                actualSubnets.sort((a, b) => {
                    return a.startAddress().toBigNumber().compare(b.startAddress().toBigNumber());
                });
                expect(actualSubnets).to.have.lengthOf(expectedSubnents.length);
                for (const [actual, expected] of util.zip(actualSubnets, expectedSubnents.map((x) => new IP6(x)))) {
                    expect(actual).to.be.instanceOf(IP6);
                    expect(actual.canonicalForm()).to.be.equal(expected.canonicalForm());
                    expect(actual.subnetMask).to.be.equal(expected.subnetMask);
                }
            });
        }
    });
});
